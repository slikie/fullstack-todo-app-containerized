services:
  todo-backend-dev:
    image: todo-backend
    build:
      context: ./todo-backend/ # The context will pick this directory as the "build context"
      dockerfile: Dockerfile.dev # This will simply tell which dockerfile to read
    volumes:
      - ./todo-backend/:/usr/src/app # The path can be relative, so ./ is enough to say "the same location as the docker-compose.yml"
    environment:
      - REDIS_URL=redis://todo-redis-dev:6379
      - MONGO_URL=mongodb://the_username:the_password@todo-mongo-dev:27017/the_database
    container_name: todo-backend-dev
    depends_on:
      - mongo
      - redis
  mongo:
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: the_username
      MONGO_INITDB_ROOT_PASSWORD: the_password
      MONGO_INITDB_DATABASE: the_database
    volumes:
      - ./todo-backend/mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
      - ./todo-backend/mongo_data:/data/db
    container_name: todo-mongo-dev
  redis:
    image: redis:latest
    command: ['redis-server', '--appendonly', 'yes']
    volumes:
      - ./todo-backend/redis_data:/data
    container_name: todo-redis-dev
  todo-frontend-dev:
    image: todo-front-dev
    environment:
      REACT_APP_BACKEND_URL: http://localhost:8080/api
    build:
      context: ./todo-frontend/
      dockerfile: Dockerfile.dev # This will simply tell which dockerfile to read
    volumes:
      - ./todo-frontend/:/usr/src/app # The path can be relative, so ./ is enough to say "the same location as the docker-compose.yml"
    container_name: todo-front-dev
    depends_on:
      - todo-backend-dev
  nginx:
    image: nginx:1.20.1
    volumes:
      - ./nginx.dev.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 8080:80
    container_name: reverse-proxy
    depends_on:
      - todo-frontend-dev
